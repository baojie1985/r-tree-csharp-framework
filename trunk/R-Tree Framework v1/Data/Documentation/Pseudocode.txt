*** Flash R-Tree ***

Point to Ponder:  Are updates to *data objects* handled by an insertion/deletion?  (I'm thinking yes and have written the below code as such.)
If so, maybe we should immediately convert to the relevant insert/delete instruction.
If not, how do we explain the terrible clustering that we will eventually have in the R-tree?
Note that internal nodes still need an update operation.

Major Additions
1) Reservation Buffer Implementation
2) Node Translation Table Implementation

- Reservation Table Object
  * Array of buffer objects with configurable maximum length 

- Buffer Object
  * Record Entry ID
  * Record Entry Spatial Location
  * Record Entry Data Pointer
  * Operation (Insert, Delete)

- Index Unit
  * Record Entry ID
  * Record Entry Spatial Location
  * Record Entry Child Pointer (internal node) OR Record Entry Data Pointer (leaf node)
  * Operation (Insert, Update, Delete)
  * Containing Node ID
  * Parent Node Pointer


- Node Translation Table (NTT) Object
  * Array of Node Traversal Lists (NTL) with variable maximum array length
    - Entry for each node in tree

- Node Translation List (NTL) Object
  * Node ID
  * Linked list of disk page ID's that contain entries for node with given ID
    - Configurable maximum length of linked list


- Modified Spatial Query Algorithm
  Perform query on index using traditional algorithm
  (* be sure to use modified node load algorithm described below *)
  For each buffer object in the reservation buffer
    Check to see if the operation affects the query results
  Return result to user
  

- Modified Node Load Algorithm
  (Use whenever a node needs to be retrieved from cache/disk)
  LoadNode (Node N)
  Look up the NTL for N in the NTT using N.ID
  For each page in the NTL
    For each index unit in the page
      If the index unit refers to N
        Modify the in-memory construction of N by performing the specified operation
  For each in-memory index unit that exists during a reservation buffer flush
    If the index refers to N
      Modify the in-memory construction of N by performing the specified operation
  Return final modified in-memory node 
  

- Modified Insertion Algorithm
   B = { Record Entry ID provided by insert call
         Record Entry Spatial Location provided by insert call
         Record Entry Data Pointer provided by insert call (or made up)
         Operation = Insert
       }
   Call AddToBuffer with object B


- Modified Deletion Algorithm
   B = { Record Entry ID provided by delete call
         Record Entry Spatial Location provided by delete call
         Record Entry Data Pointer not required
         Operation = Delete
       }
   Call AddToBuffer with object B
     
     
- Modified Update Algorithm
(* see comment above; translate into insert and delete for data nodes. *)

   B = { Record Entry ID provided by update call
         Record Entry Spatial Location provided by update call (orig value)
         Record Entry Data Pointer not required
         Operation = Delete
       }
   Call AddToBuffer with object B


   B = { Record Entry ID provided by update call
         Record Entry Spatial Location provided by update call
         Record Entry Data Pointer should match orig value (fill in during buffer flush)
         Operation = Insert
       }
   Call AddToBuffer with object B


- AddToBuffer (BufferObject B)
   If reservation buffer full
     Remove any complementary operations (insert/remove same object)
     Initialize empty array A of index units
     For each BufferObject B in the reservation buffer
       If B is an insertion
         Traverse the tree to located what node N should contain B
         
         I = {  Record Entry ID provided by B
                Record Entry Spatial Location provided by B
                Record Entry Data Pointer provided by B
	        Operation = Insert
	        Containing Node is N or N' (based on grouping)
	        Parent Node determined by stored tree traversal
	     }    
         Add I to A
         
         While (Insertion into previous N causes overflow/split)
         
           (* need to insert new internal node N' using index unit I *)
           (* If root was split, insert N and N' into new root node *)
           I = {  Record Entry ID generated by system (unique)
                  Record Entry Spatial Location provided by grouping subset of items in N
                  Record Entry Child Pointer points to new node N'
	          Operation = Insert
	          Containing Node is Parent of N
	          Parent Node determined by stored tree traversal
	       }    
           Add I to A
           
           
           For each record moved from N
             I = {  Record Entry ID provided by corresponding entry in N
	            Record Entry Spatial Location provided by corresponding entry in N
	            Record Entry Data Pointer provided by corresponding entry in N
	     	    Operation = Insert
	     	    Containing Node is N'
	     	    Parent Node determined by stored tree traversal
	         }  
             Add I to A
             
             
             I = {  Record Entry ID provided by entry in N
	            Record Entry Spatial Location provided by entry in N
	            Record Entry Data Pointer provided by entry in N
	     	    Operation = Delete
	     	    Containing Node is N
	     	    Parent Node determined by stored tree traversal
	         }  
             Add I to A
             
           (* update bounding box for N in parent node)
           I = {  Record Entry ID provided by N
                  Record Entry Spatial Location provided provided by modified N
                  Record Entry Child Pointer provided by N
	          Operation = Update
	          Containing Node is Parent of N
	          Parent Node determined by stored tree traversal
	       }    
           Add I to A
             
           
           N = Parent of N
         
         (* For all nodes that don't split, update bounding box *)
         While N != NULL
           
           I = {  Record Entry ID provided by N
                  Record Entry Spatial Location provided provided by modified N
                  Record Entry Child Pointer provided by N
	          Operation = Update
	          Containing Node is Parent of N
	          Parent Node determined by stored tree traversal
	       }    
           Add I to A
           
           N = Parent of N
             
       Else (* B is an deletion *)
         Traverse the tree to located what node N contains record deleted by B
         
         I = {  Record Entry ID provided by B
                Record Entry Spatial Location provided by B
                Record Entry Data Pointer provided by N
	        Operation = Delete
	        Containing Node is N
	        Parent Node determined by stored tree traversal
	     }    
         Add I to A
         
         While (Deletion of previous N causes undeflow/deletion)
         
           (* need to delete internal node N using index unit I *)
           (* If root was removed (only one entry remains), then elevate that entry to root *)
           I = {  Record Entry ID provided by N
                  Record Entry Spatial Location provided by N
                  Record Entry Child Pointer provided by N
	          Operation = Delete
	          Containing Node is Parent of N
	          Parent Node determined by stored tree traversal
	       }    
           Add I to A
           
           
           For each record in N
             B = {  Record Entry ID provided by N
	            Record Entry Spatial Location provided by N
	            Record Entry Data Pointer provided by N
	     	    Operation = Insert
	         }  
             Add B to reservation buffer
             
           
           N = Parent of N
         
         (* For all nodes that don't underflow, update bounding box *)
         While N != NULL
           
           I = {  Record Entry ID provided by N
                  Record Entry Spatial Location provided provided by modified N
                  Record Entry Child Pointer provided by N
	          Operation = Update
	          Containing Node is Parent of N
	          Parent Node determined by stored tree traversal
	       }    
           Add I to A
           
           N = Parent of N
             
       
     Check for and remove any redundancies in generated index units (e.g. insertions into a deleted page)
     Cluster index units with the same containing node into same page
     Add remaining IndexUnits to free space in arbitrary page
     For each newly formed page
       Call UpdateNTT(Page)
       Write Page to disk
     Clear reservation buffer
   Add B to reservation buffer
     

- UpdateNTT (Page P)
   For each Node N referenced in P
     Add P to the NTL for the ID associated with N
     If NTL length exceeds maximum allowed
       For each page in the NTL
         Read all entries associated with N.ID
       Write entries out in consecutive pages
       Update NTL for N.ID to reference new pages

 

*** Flash R-Tree Ext ***

Reservation Buffer Spatial Clustering



*** R#-Tree Ext ***

